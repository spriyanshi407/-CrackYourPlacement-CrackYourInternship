import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<Integer> countSmaller(int[] nums) {
        int n = nums.length;
        Integer[] result = new Integer[n];
        int[] indexes = new int[n];
        
        // Initialize result array and indexes array
        for (int i = 0; i < n; i++) {
            result[i] = 0;
            indexes[i] = i;
        }
        
        mergeSort(nums, indexes, result, 0, n - 1);
        
        // Convert result array to list and return
        return List.of(result);
    }

    private void mergeSort(int[] nums, int[] indexes, Integer[] result, int left, int right) {
        if (left >= right) return;

        int mid = left + (right - left) / 2;
        mergeSort(nums, indexes, result, left, mid);
        mergeSort(nums, indexes, result, mid + 1, right);
        merge(nums, indexes, result, left, mid, right);
    }

    private void merge(int[] nums, int[] indexes, Integer[] result, int left, int mid, int right) {
        int n = right - left + 1;
        int[] tempIndexes = new int[n];
        int i = left;
        int j = mid + 1;
        int k = 0;
        int rightCount = 0;

        while (i <= mid && j <= right) {
            if (nums[indexes[i]] > nums[indexes[j]]) {
                rightCount++;
                tempIndexes[k++] = indexes[j++];
            } else {
                result[indexes[i]] += rightCount;
                tempIndexes[k++] = indexes[i++];
            }
        }

        while (i <= mid) {
            result[indexes[i]] += rightCount;
            tempIndexes[k++] = indexes[i++];
        }

        while (j <= right) {
            tempIndexes[k++] = indexes[j++];
        }

        System.arraycopy(tempIndexes, 0, indexes, left, n);
    }
}
