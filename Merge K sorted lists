class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null || lists.length==0){
            return null;
        }
        return mergeKLists(lists,0,lists.length-1);
    }
    public ListNode mergeKLists(ListNode[] lists,int left,int right){
        if(left==right){
            return lists[left];
        }
        int mid=left+(right-left)/2;
        ListNode l1=mergeKLists(lists,left,mid);
        ListNode l2=mergeKLists(lists,mid+1,right);
        return mergetwolists(l1,l2);
    }
    public ListNode mergetwolists(ListNode l1,ListNode l2){
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        while(l1!=null && l2!=null){
            if(l1.val>l2.val){
                curr.next=l2;
                l2=l2.next;
            }
            else{
                curr.next=l1;
                l1=l1.next;
            }
            curr=curr.next;
        }
        if(l1==null){
            curr.next=l2;
        }
        else{
            curr.next=l1;
        }
        return dummy.next;
    }
}
