/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy=new ListNode(0);
        ListNode current=dummy;
        int carry=0;
        l1=reverselist(l1);
        l2=reverselist(l2);
        while(l1!=null || l2!=null){
            int val1=(l1!=null)?l1.val:0;
            int val2=(l2!=null)?l2.val:0;
            int result=val1 + val2 + carry;
            carry=result/10;
            int total=result%10;
            current.next=new ListNode(total);
            current=current.next;
            if(l1!=null) l1=l1.next;
            if(l2!=null) l2=l2.next;
        }
        if (carry>0){
            current.next=new ListNode(carry);
        }
        return reverselist(dummy.next);
    }
    public ListNode reverselist(ListNode head){
        ListNode prev=null;
        ListNode curr=head;
        while(curr!=null){
            ListNode next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            while(next!=null){
                next=next.next;
            }
        }
        return prev;
    }
}
